// minMalwareSpread2.cpp
// leetcode
//
// Created by  Song Ding on 10/22/18.
// Copyright Â© 2018 Song Ding. All rights reserved.
//
#include "common.h"
using namespace std;

namespace minMalwareSpread2 {

class Solution {
public:
    /**
     * For each intial node, find M(initial) if it is removed.
     * To find the M(initial), BFS can be used.
     */
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = n + 1;
        int res = n;
        for (auto i : initial) {
            vector<int> empty(n, 0);
            vector<int> ninit(initial);
            ninit.erase(remove(ninit.begin(), ninit.end(), i), ninit.end());
            empty.swap(graph[i]);
            for (int j = 0; j < n; ++j) {
                graph[j][i] = 0;
            }
            
            int t = findInfected(graph, ninit);
            if (t < m) {
                res = i;
                m = t;
            } else if (t == m && i < res) {
                res = i;
            }
            
            for (int j = 0; j < n; ++j) {
                graph[j][i] = empty[j];
            }
            graph[i].swap(empty);
        }
        return res;
    }

private:
    int findInfected(vector<vector<int>>& graph, vector<int>& initial) {
        set<int> cur(initial.begin(), initial.end());
        set<int> infected(cur);
        while (cur.size()) {
            infected.insert(cur.begin(), cur.end());
            set<int> next;
            for (auto i : cur) {
                for (int j = 0; j < graph.size(); ++j) {
                    if (graph[i][j] == 1 && infected.find(j) == infected.end()) {
                        next.insert(j);
                    }
                }
            }
            cur.swap(next);
        }
        return infected.size();
    }
};

}

/*/
int main() {
    // TODO: prepare parameters here
    vector<vector<int>> graph {
        //{1,0,0,0},{0,1,0,0},{0,0,1,1},{0,0,1,1}
        {1,1,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,1},{0,0,1,0,1,0,0,0,0,1},{0,0,0,1,0,0,0,0,0,1},{0,0,1,0,1,0,1,0,0,1},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,1,1,1,0,0,1},{0,0,0,0,0,0,0,1,1,0},{0,0,0,0,0,0,0,1,1,0},{0,1,1,1,1,0,1,0,0,1}
    };
    vector<int> initial {
        //3,1
        9,0,2
    };

    // TODO: add return type and paramters.
    clock_t tstart = clock();
    auto res = minMalwareSpread2::Solution().minMalwareSpread(graph, initial);
    cout << clock() - tstart << endl;
    cout << res << endl;
    return 0;
}
//*/
