// minAreaRect.cpp
// leetcode
//
// Created by  Song Ding on 5/21/19.
// Copyright Â© 2019 Song Ding. All rights reserved.
//
#include "common.h"
using namespace std;

namespace minAreaRect {
/*
// TODO: copy problem statement here
 939. Minimum Area Rectangle
 Medium
 
 235
 
 47
 
 Favorite
 
 Share
 Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.
 
 If there isn't any rectangle, return 0.
 
 
 
 Example 1:
 
 Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
 Output: 4
 Example 2:
 
 Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
 Output: 2
 
 
 Note:
 
 1 <= points.length <= 500
 0 <= points[i][0] <= 40000
 0 <= points[i][1] <= 40000
 All points are distinct.
 */

class Solution {
public:
    /**
     * brutal force:
     *   Group points by x, then check each group pair and see whether
     *   a rectangular can be formed.
     *   starting from group pairs which have index gap of 1, and record
     *   the min area, and use min area to bail out early if the distance
     *   itself >= min area found.
     */
    int minAreaRect(vector<vector<int>>& points) {
        map<int, set<int>> pointsByX;
        for (const auto& p : points) {
            pointsByX[p[0]].insert(p[1]);
        }
        vector<pair<int,set<int>>> xgroups;
        for (const auto& p : pointsByX) {
            xgroups.push_back(p);
        }
        int res = INT_MAX;
        int n = xgroups.size();
        for (int k = 1; k < n && k < res; ++k) {
            for (int i = 0; i < n - k; ++i) {
                int j = i + k;
                int xd = xgroups[j].first - xgroups[i].first;
                if (xd >= res) {
                    continue;
                }
                vector<int> ycommon(xgroups[i].second.size());
                auto it = set_intersection(xgroups[i].second.begin(), xgroups[i].second.end(), xgroups[j].second.begin(), xgroups[j].second.end(), ycommon.begin());
                ycommon.resize(it - ycommon.begin());
                int cn = ycommon.size();
                for (int l = 0; l < cn - 1; ++l) {
                    int yd = ycommon[l+1] - ycommon[l];
                    res = min(res, xd * yd);
                }
            }
        }
        if (res == INT_MAX) {
            return 0;
        } else {
            return res;
        }
    }

private:
};

}

/*/
int main() {
    // TODO: define parameter type here
    struct d {
        vector<vector<int>> points;
    };
    // TODO: prepare parameters here
    vector<struct d> p {
        //{{{1,1},{1,3},{3,1},{3,3},{2,2}}},
        //{{{1,1},{1,3},{3,1},{3,3},{4,1},{4,3}}},
        {{{6678,15171},{11565,33016},{33838,5555},{37312,5555},{3137,17233},{17869,17275},{2527,33101},{28152,23341},{37312,16520},{12912,33101},{14795,9062},{20235,15171},{2527,32716},{18534,2008},{12931,4261},{18534,16520},{35975,9062},{38737,32510},{17869,4261},{11565,19856},{29761,17233},{34990,32716},{15934,16513},{28152,22311},{18420,33016},{35975,22311},{3137,9062},{2527,8695},{18635,14610},{34990,15671},{38737,17233},{15339,23341},{6678,17275},{15339,15171},{28152,15171},{28152,33016},{18534,8695},{37312,15171},{35975,15671},{18635,16520},{15934,16520},{11565,17275},{33838,17275},{17869,5555},{32049,5555},{34990,30173},{34990,31921},{12912,30173},{2527,2008},{12912,5555},{37312,32716},{12931,17275},{29761,27737},{37312,2008},{33838,4261},{3137,4261},{17869,9062},{18635,16513},{28152,8695},{33838,15671},{18420,23341},{29761,17275},{33838,19856},{18420,2008},{6678,4261},{38737,15171},{18420,5555},{34990,19856},{6678,5555},{32049,16520},{6678,15671},{3137,8695},{15934,8695},{18420,32510},{37312,17233},{14795,8695},{6678,32510},{35975,33016},{18420,22311},{6678,22311},{18635,17275},{15339,15671},{18534,5555},{33838,17233},{18635,17233},{12931,15171},{17869,33016},{12931,16513},{32049,16513},{2527,31921},{6678,16520},{6678,9062},{32049,14610},{12931,33101},{11565,9062},{18534,33101},{38737,8695},{37312,16513},{12931,32716},{6678,23341},{28152,4261},{11565,22311},{18534,17275},{15934,27737},{14795,19856},{35975,15171},{12912,15171},{28152,19856},{2527,17233},{32049,32716},{34990,15171},{38737,33101},{15339,33101},{18420,8695},{12931,8695},{3137,5555},{38737,32716},{15934,5555},{14795,5555},{11565,23341},{12912,32510},{37312,23341},{18534,32510},{35975,32510},{17869,8695},{38737,31921},{6678,2008},{18635,4261},{32049,33016},{35975,4261},{14795,33016},{34990,8695},{33838,14610},{15339,32510},{18534,15671},{14795,17275},{11565,32510},{18534,19856},{38737,4261},{14795,17233},{2527,14610},{15934,22311},{12931,32510},{11565,17233},{6678,14610},{37312,8695},{12912,23341},{3137,22311},{11565,4261},{17869,17233},{18420,14610},{12912,31921},{15339,22311},{3137,33016},{15339,31921},{18420,15171},{18420,16513},{3137,33101},{29761,9062},{18534,16513},{18635,33101},{34990,14610},{34990,27737},{35975,27737},{29761,4261},{33838,16513},{18534,33016},{12912,27737},{18635,32716},{20235,9062},{2527,16513},{15934,32716},{12912,4261},{11565,33101},{3137,15671},{37312,33101},{17869,19856},{12931,16520},{14795,15671},{15934,19856},{32049,17275},{18420,16520},{6678,16513},{20235,22311},{20235,31921},{11565,15171},{6678,17233},{33838,16520},{15934,17275},{6678,27737},{18420,27737},{17869,15171},{3137,32510},{35975,33101},{3137,2008},{29761,15671},{20235,15671},{2527,23341},{12931,19856},{20235,27737},{18420,17233},{15934,33016},{12912,9062},{38737,16520},{20235,4261},{37312,27737},{33838,27737},{12912,16520},{37312,17275},{33838,23341},{34990,9062},{18635,33016},{32049,17233},{37312,4261},{2527,9062},{29761,32716},{29761,19856},{14795,30173},{18420,33101},{33838,22311},{2527,22311},{28152,5555},{35975,19856},{11565,30173},{28152,16513},{37312,9062},{15339,27737},{20235,32716},{18635,23341},{18534,14610},{20235,32510},{15339,9062},{35975,32716},{3137,16520},{29761,5555},{2527,15671},{2527,30173},{15339,16520},{37312,31921},{15934,17233},{14795,32716},{28152,16520},{14795,32510},{38737,22311},{35975,2008},{32049,15171},{15339,32716},{29761,16513},{37312,15671},{12912,32716},{11565,32716},{28152,27737},{15339,16513},{6678,30173},{29761,14610},{17869,32716},{3137,27737},{37312,22311},{34990,17275},{18635,8695},{12931,5555},{28152,15671},{18534,17233},{33838,30173},{33838,31921},{32049,8695},{34990,33016},{2527,17275},{12912,33016},{2527,16520},{15934,15171},{6678,31921},{18635,15171},{34990,33101},{29761,23341},{18534,32716},{14795,27737},{3137,19856},{18635,19856},{38737,9062},{34990,5555},{11565,27737},{37312,14610},{35975,5555},{11565,14610},{28152,32716},{18420,4261},{15339,14610},{12912,22311},{14795,23341},{17869,2008},{11565,2008},{12931,23341},{34990,22311},{3137,14610},{32049,33101},{12931,33016},{18420,32716},{6678,33101},{2527,4261},{12912,15671},{18534,15171},{12931,9062},{38737,15671},{2527,15171},{18420,31921},{12912,16513},{34990,17233},{20235,16520},{33838,33101},{20235,8695},{38737,23341},{18635,5555},{3137,15171},{28152,30173},{28152,31921},{3137,31921},{11565,31921},{38737,33016},{20235,17275},{3137,30173},{18420,15671},{20235,17233},{12931,15671},{18420,30173},{20235,16513},{12931,30173},{32049,19856},{20235,23341},{3137,17275},{18534,30173},{38737,16513},{38737,19856},{35975,8695},{12931,2008},{18635,32510},{34990,4261},{32049,30173},{32049,32510},{14795,15171},{15339,4261},{14795,14610},{18635,27737},{29761,16520},{15339,17233},{28152,14610},{38737,30173},{37312,33016},{32049,2008},{17869,31921},{38737,2008},{28152,33101},{20235,14610},{33838,8695},{18420,17275},{18635,22311},{14795,31921},{29761,33101},{3137,23341},{37312,19856},{12931,22311},{29761,32510},{15934,9062},{15339,19856},{11565,15671},{3137,32716},{15934,15671},{18635,15671},{2527,5555},{20235,33016},{14795,4261},{15339,8695},{29761,15171},{12912,14610},{18534,22311},{28152,17233},{29761,31921},{15934,31921},{2527,33016},{15339,17275},{11565,16520},{28152,32510},{12931,27737},{18534,9062},{35975,23341},{17869,32510},{18534,27737},{35975,31921},{33838,15171},{12931,17233},{18635,30173},{18534,23341},{15934,32510},{20235,33101},{11565,16513},{12912,8695},{38737,27737},{29761,30173},{18635,2008},{15934,2008},{38737,14610},{32049,9062},{17869,27737},{2527,19856},{12912,17275},{35975,17233},{38737,17275},{12912,17233},{14795,22311},{18635,31921},{15934,4261},{32049,22311},{34990,23341},{33838,33016},{17869,16520},{11565,5555},{35975,30173},{15339,5555},{18420,19856},{29761,8695},{12931,14610},{32049,15671},{2527,32510},{15934,33101},{20235,19856},{17869,33101},{33838,32510},{28152,9062},{6678,19856},{29761,22311},{15339,33016},{32049,23341},{18635,9062},{17869,16513},{20235,5555},{33838,2008},{20235,30173},{17869,14610},{18534,4261},{37312,32510},{15934,14610},{37312,30173},{32049,31921},{35975,14610},{34990,16513},{38737,5555},{20235,2008},{12912,19856},{6678,8695},{35975,17275},{32049,27737},{35975,16520},{32049,4261},{34990,32510},{29761,2008},{15339,30173},{17869,22311},{14795,2008},{18534,31921},{34990,16520},{11565,8695},{6678,33016},{14795,16520},{6678,32716},{34990,2008},{15934,30173},{28152,2008},{17869,30173},{2527,27737},{15339,2008},{12912,2008},{14795,33101},{17869,15671},{35975,16513},{29761,33016},{33838,9062},{33838,32716},{15934,23341},{17869,23341},{28152,17275},{3137,16513},{14795,16513},{18420,9062},{12931,31921}}}
    };

    vector< int  > answers {
        4,
        2,
        133
    };

    // TODO: update paramters.
    for (auto& dp : p) {
        cout << endl;
        clock_t tstart = clock();
        auto res = minAreaRect::Solution().minAreaRect(dp.points);
        cout << clock() - tstart << endl;
        cout << res << endl;
    }
    return 0;
}
//*/
