//
//  widthOfBinaryTree.cpp
//  leetcode
//
//  Created by  Song Ding on 11/29/17.
//  Copyright Â© 2017 Song Ding. All rights reserved.
//

#include "common.h"

using namespace std;
/**
 662. Maximum Width of Binary Tree
 Medium

 775

 161

 Favorite

 Share
 Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

 The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

 Example 1:

 Input:

            1
          /   \
         3     2
        / \     \
       5   3     9

 Output: 4
 Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
 Example 2:

 Input:

           1
          /
         3
        / \
       5   3

 Output: 2
 Explanation: The maximum width existing in the third level with the length 2 (5,3).
 Example 3:

 Input:

           1
          / \
         3   2
        /
       5

 Output: 2
 Explanation: The maximum width existing in the second level with the length 2 (3,2).
 Example 4:

 Input:

           1
          / \
         3   2
        /     \
       5       9
      /         \
     6           7
 Output: 8
 Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


 Note: Answer will in the range of 32-bit signed integer.
 */

namespace widthOfBinaryTree {
    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        /**
         * BFS:
         * assign id to each node based on left/right, and use null node to separate levels.
         * update result when null node is met.
         *
         * if tree height is very large, id may exceed limit
         */
        int widthOfBinaryTree(TreeNode* root) {
            unsigned long res = 0;
            queue<pair<TreeNode*, unsigned long>> ws;
            if (root) {
                ws.push({root, 1});
                ws.push({NULL, 2});
            }
            unsigned long level_start = 0;
            unsigned long id = 0;
            while (ws.size()) {
                auto p = ws.front();
                ws.pop();
                TreeNode* cur = p.first;
                if (cur != NULL) {
                    id = p.second;
                }
                if (level_start <= 0) {
                    level_start = id;
                }
                
                // end of a level
                if (cur == NULL) {
                    res = max(res, id-level_start+1);
                    if (ws.size()) {
                        ws.push({NULL, id+1});
                    }
                    level_start = 0;
                    id = 0;
                } else {
                    if (cur->left) {
                        ws.push({cur->left, id*2-1});
                    }
                    if (cur->right) {
                        ws.push({cur->right, id*2});
                    }
                }
            }
            return res;
        }
        int widthOfBinaryTree2(TreeNode* root) {
            vector<pair<int,int>> layerRange;
            if (root != NULL) {
                layerRange.push_back(make_pair(0, 0));
                recur(root, 1, 0, layerRange);
            }
            int max = 0;
            for (const auto& r : layerRange) {
                if (r.second - r.first + 1 > max) {
                    max = r.second - r.first + 1;
                }
            }
            return max;
        }
    private:
        void recur(TreeNode* r, int layer, int p, vector<pair<int,int>>& layerRange) {
            if (r == NULL) {
                return;
            }
            if (r->left) {
                int v = p * 2;
                if (layerRange.size() <= layer) {
                    layerRange.push_back(make_pair(v, v));
                } else {
                    pair<int,int>& l = layerRange[layer];
                    if (v < l.first) {
                        l.first = v;
                    }
                    if (v > l.second) {
                        l.second = v;
                    }
                }
                recur(r->left, layer + 1, v, layerRange);
            }
            if (r->right) {
                int v = p * 2 + 1;
                if (layerRange.size() <= layer) {
                    layerRange.push_back(make_pair(v, v));
                } else {
                    pair<int,int>& l = layerRange[layer];
                    if (v < l.first) {
                        l.first = v;
                    }
                    if (v > l.second) {
                        l.second = v;
                    }
                }
                recur(r->right, layer + 1, v, layerRange);
            }
        }
    };
}
/*
int main() {
    // TODO: define parameter type here
    struct d {
        vector<int> nodeVals;
    };
    // TODO: prepare parameters here
    vector<struct d> p {
        {{1,3,INT_MAX,5,3}},
        {{0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,INT_MAX,0,0}}
    };

    vector< int > answers {
        2,
    };

    // TODO: update paramters.
    for (auto& dp : p) {
        cout << endl;
        clock_t tstart = clock();
        auto res = widthOfBinaryTree::Solution().widthOfBinaryTree2(toTree(dp.nodeVals));
        cout << clock() - tstart << endl;
        cout << res << endl;
    }
    return 0;
}
 //*/
