// lenLongestFibSubseq.cpp
// leetcode
//
// Created by  Song Ding on 5/16/19.
// Copyright Â© 2019 Song Ding. All rights reserved.
//
#include "common.h"
using namespace std;

namespace lenLongestFibSubseq {
/*
 873. Length of Longest Fibonacci Subsequence
 Medium
 
 361
 
 15
 
 Favorite
 
 Share
 A sequence X_1, X_2, ..., X_n is fibonacci-like if:
 
 n >= 3
 X_i + X_{i+1} = X_{i+2} for all i + 2 <= n
 Given a strictly increasing array A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.  If one does not exist, return 0.
 
 (Recall that a subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.  For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)
 
 
 
 Example 1:
 
 Input: [1,2,3,4,5,6,7,8]
 Output: 5
 Explanation:
 The longest subsequence that is fibonacci-like: [1,2,3,5,8].
 Example 2:
 
 Input: [1,3,7,11,12,14,18]
 Output: 3
 Explanation:
 The longest subsequence that is fibonacci-like:
 [1,11,12], [3,11,14] or [7,11,18].
 
 
 Note:
 
 3 <= A.length <= 1000
 1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9
 (The time limit has been reduced by 50% for submissions in Java, C, and C++.)
 */
class Solution {
public:
    /**
     * Let F(i) = list of Fib seqs that end at A[i];
     * then F(i+1) = ({F[j][k],A[i+1]} if F[j][k] and A[i+1] can form a fib seq for j from 0 to i
     *
     * To make look up faster, a map can be maintained for each position,
     * with the previous element of fib seq being the key.
     */
    int lenLongestFibSubseq(vector<int>& A) {
        int res = 0;
        int n = A.size();
        unordered_set<int> oa(A.begin(), A.end());
        vector<unordered_map<int,int>> fibs(n);
        for (int i = 2; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                int p = A[i] - A[j];
                if (p >= A[j]) {
                    break;
                }
                auto it = fibs[j].find(p);
                if (it != fibs[j].end()) {
                    fibs[i].insert(make_pair(A[j], it->second + 1));
                    res = max(res, it->second + 1);
                } else {
                    auto it = oa.find(p);
                    if (it != oa.end()) {
                        fibs[i].insert(make_pair(A[j], 3));
                        res = max(res, 3);
                    }
                }
            }
        }
        return res;
    }
    /**
     * let fibs[i] = (prev value, len of seq) as of current position, fibs being a multimap
     */
    int lenLongestFibSubseq2(vector<int>& A) {
        int n = A.size();
        unordered_map<int, vector<vector<int>>> fibs;
        unordered_map<int, vector<int>> triplets;
        unordered_set<int> oa(A.begin(), A.end());
        for (int i = 0; i < n; ++i) {
            for (int j = i+1; j < n && A[i]+A[j] <= A[n-1]; ++j) {
                if (oa.find(A[i]+A[j]) != oa.end()) {
                    triplets[A[i]+A[j]].push_back(A[j]);
                }
            }
        }
        int res = 0;
        for (int i = 2; i < n; ++i) {
            for (auto& p : fibs[A[i]]) {
                fibs[A[i]+p[0]].push_back({A[i],p[1]+1});
                res = max(res, p[1]+1);
            }
            
            for (auto s : triplets[A[i]]) {
                fibs[A[i]+s].push_back({A[i],3});
                res = max(res, 3);
            }
        }
        return res;
    }
    
    int lenLongestFibSubseq3(vector<int>& A) {
        unordered_set<int> s(A.begin(), A.end());
        int res = 0;
        for (int i = 0; i < A.size(); ++i) {
            for (int j = i + 1; j < A.size(); ++j) {
                int  a = A[i], b = A[j], l = 2;
                while (s.count(a + b))
                    b = a + b, a = b - a, l++;
                res = max(res, l);
            }
        }
        return res > 2 ? res : 0;
    }
    int lenLongestFibSubseq4(vector<int>& A) {
        unordered_map<int, int> m;
        int N = A.size(), res = 0;
        int dp[N][N];
        for (int j = 0; j < N; ++j) {
            m[A[j]] = j;
            for (int i = 0; i < j; ++i) {
                int k = m.find(A[j] - A[i]) == m.end() ? -1 : m[A[j] - A[i]];
                dp[i][j] = (A[j] - A[i] < A[i] && k >= 0) ? dp[k][i] + 1 : 2;
                res = max(res, dp[i][j]);
            }
        }
        return res > 2 ? res : 0;
    }
private:
};

}

/*/
int main() {
    // TODO: prepare parameters here
    struct d {
        vector<int> A;
    };
    vector<struct d> p {
        {{1,2,3,4,5,6,7,8}},
        {{1,3,7,11,12,14,18}},
        {{1,3,5}},
        {{17,19,21,27,28,33,41,42,49,54,55,58,60,62,64,70,71,75,81,86,87,91,92,98,99,101,117,127,135,140,141,144,150,161,167,168,172,214,216,226,228,230,231,259,262,266,289,351,353,364,369,371,374,423,426,434,461,567,578,579,597,602,604,685,700,750,918,932,942,966,973,978,1108,1111,1134,1211,1485,1511,1520,1563,1575,1582,1793,1796,1834,1961,2403,2443,2462,2529,2560,2901,2907,2968,3172,3888,3954,3982,4092,4694,4703,4802,5133,6291,6397,6444,7595,7610,7770,8305,10179,10351,10426,12289,12313,13438,16470,16748,16870,19884,19923,21743,26649,27296,32173,32236,35181,43119,44166,52057,52159,56924,69768,71462,84230,84395,92105,115628,136287,136554,187090,220517,220949,356804,357503,577321,578452,934125,935955,1178751,1461503,1511446,1514407,2445571,2450362,3957017,3964769,6402588,7355449,10359605,11836627,12404875,16762193,17210626,19023742,19804474,21203091,21784921,22783719,25741672,25839074,28591773,30444892,30543172,31236452,31535859,33775173,36117476,36237701,37400344,37956496,38221437,39277063,39675701,41265064,44734774,45047167,47278884,47544890,47934554,48266858,48621607,48851289,49141023,49686300,50043174,52575636,55086049,56195922,56548830,59541455,59802674,60146593,60541280,60826314,65246206,65680010,66386644,67152946,69672785,69955893,70642959,70845008,74715037,76036497,81263958,81493996,82659816,82875183,83558188,85291432,85461688,87905649,88592161,93178471,93234497,93402511,94481818,94828136,96862193,97062060,97564929,100926692,101197130,104374615,106897461,108527500,108672900,111497867,114270778,115719043,116241967,119144208,119269578,119746410,121489259,122621508,123239540,123818807,124219204,127514974,127576420,128287220,129388229,130936608,131648694,132636844,133213884,133236850,136784015,138403018,138835326,138838397,139213470,139958016,140021927,140758625,140810101,140951447,141013528,142168668,142501297,144216653,144346778,144676304,147931677,148088088,149723272,150057179,156492409,156533747,156730462,156744460,157162449,158426936,158578686,158815625,160427062,160685079,161312327,161343662,162752547,164582095,164645814,167503465,169740897,171924066,173122334,175447745,177675396,180320577,180654651,181061177,182276858,183912288,184233428,185871487,186251768,187293173,187622881,191274317,191915495,193744678,194387735,194618847,195047537,195511630,195993799,198208617,198229014,200470599,200822143,201033707,202164493,203634542,206449475,207034718,207609472,207950082,209224042,210649992,210779745,211860726,212716248,213751828,214106623,215416052,217740838,218976533,221390155,223896466,224788686,225178255,226702684,226949830,228191244,228716614,228917627,229465475,229781044,231405248,232658481,233892034,235439498,237265249,238418217,241157583,243655870,243753943,244204727,244492198,245368825,245692923,246502695,248049774,248936872,249587698,251922364,252057715,252308830,255637014,260747319,260848227,262507615,263113406,263694180,265054378,265162203,265903438,268859554,268971754,269175743,269409490,270543948,277292043,278275378,278659738,279920385,280055239,280372535,280712431,281641298,282387912,282392535,282447496,283623013,286241268,287320034,287554446,288324897,289006372,291650425,292092245,294201047,296394951,296458391,296576624,298033093,301234523,303153745,305538790,306003586,306087777,306688569,308478091,309051543,310108992,311098833,311505876,312361026,313035873,317451009,318080153,319184504,319211009,319331326,319353633,321497520,321626639,321920214,322798050,323139753,323196540,324131931,324371590,325412905,326194232,326611906,327334916,327575356,330374454,330527681,330988349,331261443,333247786,333368062,334185326,335262465,335575504,336526959,336744333,336775452,337555732,339161180,339603542,339728784,339742941,343232256,347107057,349234626,350264163,351500170,351793735,352011544,353190305,353283503,354427926,355620226,356639116,357005865,361233027,361234845,361492463,365349228,365550547,366247437,366742291,368046749,371584346,373897157,374887787,375383784,377250084,378743140,379060316,379803151,382253882,383029922,384289649,388560578,389801571,394183179,394720218,399145997,399446379,400588425,400844102,401133502,403099578,403108805,404439086,404617194,406749840,409653629,410078826,411206343,413541517,419435638,419950082,419961678,420520442,422234096,422953446,423700391,425787099,425974273,429072566,429833274,432304657,433349986,433746032,436558918,437209009,438254588,439550973,439856258,440224354,442812590,444203014,448366876,448866800,449503943,449559149,449943849,450809565,451914472,452351954,454877957,459105368,459536187,460540927,461986506,462546348,463158087,463429371,464787675,466512393,466665120,468746339,468765587,469323423,470088667,470201486,471008565,472819179,473622153,473949243,473960048,474073767,474609376,476861068,480228945,480634614,481307041,482470102,482978729,483571625,485273657,485673721,487023370,487618158,488114970,488239213,488244737,489197051,491899258,495889609,495947018,496537916,497804509,498703701,499630604,500255983,501069020,502418584,502657196,503256718,504378526,506259472,507384162,513843708,516245775,516666125,516740581,517473088,518866187,518984202,521853859,522850752,523001131,523119816,525091525,526561584,527529427,529948613,530374698,531933391,532296916,533680126,536650623,537391356,538809869,539259359,539456806,547219183,548147487,549807191,550928998,554320870,554748580,556643168,558992962,559274791,559944679,560212687,560695259,560767279,561283947,562960589,563183141,564150185,564199740,568203797,569307653,570698295,570735010,571608956,572283410,572333162,573890799,574189319,575448812,576064081,576213361,576397975,577419728,577486286,577978659,577995616,579784501,580524028,580599870,581340897,582014532,583470112,583494828,583814951,584468017,586384312,588375571,589124411,590691271,591187499,591325562,591421321,591588201,593926808,594121602,594242091,595583841,595699363,595738336,600228498,602166614,603757743,604064726,604098054,604369303,611880299,614377729,614543254,615867858,619790592,619801960,620557260,622004442,622302256,623086072,623399654,624166912,624658648,625212202,625514082,626893906,629501143,629708486,630033851,630981441,632464359,632937455,633496246,633952682,635473964,635879149,636115045,636394420,639268536,640204474,641467594,641516217,641632755,642527923,642713491,643628342,643686935,644419057,645429210,646311719,647576432,647940019,648916130,650448003,652064056,652999311,654052332,654286347,654492866,654691655,656384007,656513964,657965787,658003199,659167417,660059853,666490894,667556033,668383264,668632987,670195088,670975663,672012294,672329985,674350760,676006652,677259070,678505237,680560438,682901298,682915731,685413722,685924528,685928545,685938569,690109045,691878341,693282611,695225316,695252617,695282728,695889090,696407504,696589229,698060211,699392211,701619079,703308020,705968156,709605152,710535555,711196768,711826981,715639298,716237084,716311185,717374115,721470651,721927315,723808022,725175100,731884343,732500109,734801304,737019000,738020062,739143149,741656654,741927955,742753156,742917666,744130144,744589868,745109558,747258874,748014837,748312591,748652612,749488824,750329861,751021659,751289678,753289254,753939466,754463858,755044979,757313171,757925788,758410071,758828617,761261934,761274059,761377407,761441834,761537768,762005745,762390787,762652681,765568771,769068429,769633562,773645858,775819598,775977662,776567583,779475876,780744998,783518810,786221043,789372981,790708680,791779909,792396373,793156786,794011142,799259730,801271144,803375999,803543211,803677562,803985988,804087514,804157149,804449084,805047961,805672973,807233372,811543771,811575906,812121480,812171670,812559603,813663031,816850850,817104977,817897657,818748336,818938142,819047375,819468675,819794935,823956184,824750068,826109612,827023229,827341044,828009396,829369331,830710462,831123899,831337751,833021621,834046500,834847921,836157353,836425962,836744841,837682978,840334831,840456167,840972353,841788832,842683990,842974619,843550784,846566179,846567053,846850481,847034915,849445732,850218993,853149834,853326616,853700339,858397460,859141793,859353274,860143851,860207641,860597950,860741914,860826481,861599666,862235902,863830519,867188547,868754682,869753213,870496329,871611111,871869387,874061435,874770277,875876455,876290443,876351312,877161889,877343633,877528256,878748572,880285229,881999692,882194985,882279911,882772328,883632266,886732852,887474384,887773099,891930829,894733112,894834642,899998635,902000944,902066596,902394678,902399949,902457237,904528454,905099541,905582486,906030725,906239825,910664298,911002299,911689384,915332122,915537214,916723429,916858179,918518464,925125863,930834901,934110487,939829589,941855052,942638882,943252307,943846762,944611010,945241686,945706227,947534173,949405460,949840014,949975655,950007368,950013145,950944004,951111453,956177746,956703704,957582593,957633006,957773983,961302342,964099891,965065721,973836399,973893372,976948901,978799317,978839672,981921683,982352473,982569902,982790640,985215175,986117348,989222351,989859631,989898502,994281088,995408933,996766190,998034594,998719476}}
    };

    vector<  int > answers {
        5,
        3,
        0,
        29
    };
    int i = 3;

    // TODO: add return type and paramters.
    clock_t tstart = clock();
    auto res = lenLongestFibSubseq::Solution().lenLongestFibSubseq4(p[i].A);
    cout << clock() - tstart << endl;
    cout << res << endl;
    return 0;
}
//*/
