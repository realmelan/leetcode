//
//  countDifferentSubsequenceGCDs.cpp
//  leetcode
//
//  Created by Song Ding on 4/4/21.
//  Copyright Â© 2021 Song Ding. All rights reserved.
//

#include "common.h"
using namespace std;

namespace countDifferentSubsequenceGCDs {
/*
// TODO: copy problem statement here
 1819. Number of Different Subsequences GCDs My SubmissionsBack to Contest
 User Accepted: 152
 User Tried: 1516
 Total Accepted: 182
 Total Submissions: 3941
 Difficulty: Hard
 You are given an array nums that consists of positive integers.

 The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

 For example, the GCD of the sequence [4,6,16] is 2.
 A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

 For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
 Return the number of different GCDs among all non-empty subsequences of nums.

  

 Example 1:


 Input: nums = [6,10,3]
 Output: 5
 Explanation: The figure shows all the non-empty subsequences and their GCDs.
 The different GCDs are 6, 10, 3, 2, and 1.
 Example 2:

 Input: nums = [5,15,40,5,6]
 Output: 7
  

 Constraints:

 1 <= nums.length <= 10^5
 1 <= nums[i] <= 2 * 10^5
*/
class Solution {
public:
    // TODO: copy function signature here
    // https://leetcode.com/problems/number-of-different-subsequences-gcds/discuss/1141309/Simple-explanation-or-O(n-*-sqrt-n)
    int countDifferentSubsequenceGCDs(vector<int>& nums) {
        vector<int> factors(200001, 0);
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j *j <= nums[i]; ++j) {
                if (nums[i]%j == 0) {
                    int factor1 = j;
                    int factor2 = nums[i]/j;
                    // here initially factors[factor1] = 0, so that gcd returns nums[i]
                    // as the first factor.
                    factors[factor1] = gcd(factors[factor1], nums[i]);
                    factors[factor2] = gcd(factors[factor2], nums[i]);
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= 200000; ++i) {
            if (factors[i] == i) {
                ++res;
            }
        }
        return res;
    }
    int countDifferentSubsequenceGCDs_TLE(vector<int>& nums) {
        unordered_set<int> cds;
        cds.insert(nums[0]);
        for (int i = 1; i < nums.size(); ++i) {
            if (cds.count(nums[i])) {
                continue;
            }
            unordered_set<int> next(cds);
            next.insert(nums[i]);
            // only need to consider divisor of nums[i];
            for (auto j : cds) {
                next.insert(gcd(j, nums[i]));
            }
            cds.swap(next);
        }
        return cds.size();
    }
    int gcd(int a, int b) {
        if (a < b) {
            swap(a, b);
        }
        while (b) {
            int t = a%b;
            a = b;
            b = t;
        }
        return a;
    }
private:
};
}

/*
int main() {
    // TODO: define parameter type here
    struct param {
        vector<int> nums;
    };
    // TODO: prepare parameters here
    vector<struct param> params {
        {{5,15,40,5,6}},
        {{29137,167287,112814,106426,103195,153199,91883,126798,97930,174611,83043,122465,190433,171548,67450,134376,38615,198020,147183,42426,30802,110961,35704,192755,182594,18316,52417,184694,104105,199791,109335,182192,149896,74302,132327,174622,115024,13161,84402,47355,149147,51989,154231,88012,98500,71623,120559,157030,39347,141804,104167,63872,39887,194459,185245,196518,89434,152129,187205,53255,64019,99268,181782,816,125046,180317,174697,75727,35693,193156,199759,179148,148807,56395,89241,89179,67737,192896,12795,6901,131414,19414,63054,106493,151046,188744,48556,135389,155635,147361,9558,138475,52045,170118,64468,62878,132955,90030,113867,84806,14158,180926,168469,1299,147038,168191,159864,115186,88822,189841,86598,42271,193822,59352,130813,1585,102906,11659,74263,144782,113707,3669,75239,38093,189268,34825,164292,105652,378,112280,127116,163312,180758,36866,52980,188165,31163,82464,166144,129151,114677,199039,18424,82639,92682,54577,20464,56859,163776,109716,32003,149687,107481,144829,35040,131927,100979,110189,112903,119966,125768,163588,63278,161264,112272,149574,64812,176179,17407,6725,83974,91236,59556,71521,166177,109175,82380,174701,43856,90224,61659,50616,155627,183113,32953,128950,41041,44658,37287,179057,58629,140117,10092,197328,99848,98284,88606,125731,145181,97117,93894,190607,194434,59580,123253,107898,121484,62422,135231,26403,177182,38133,52014,39625,158488,152507,59195,33245,88515,107618,118894,164458,117077,122724,26679,172799,49321,862,119792,105603,130824,52957,148464,158044,118410,164711,19553,149842,44805,121688,78477,13234,99018,197210,158002,180697,74057,45248,44769,115186,80020,179527,79680,4922,125703,124297,76993,94504,140347,126671,82928,24451,21016,126332,147005,45732,119905,173424,111620,50239,189853,196776,179983,86215,73434,188900,181054,35782,68788,100430,88425,2407,162129,22384,115942,141533,193113,187397,195640,116182,90631,189880,198428,127075,74696,102016,78363,29965,271,182684,12661,5829,37097,7809,68621,41704,10735,128834,198050,186059,183313,114654,153287,107934,83255,103966,132098,56777,39670,157161,151994,175320,6358,110083,166473,89530,132579,105265,175812,171386,60423,61890,55547,34783,127905,49826,167410,148299,88397,9780,47934,21022,46363,173913,1325,113189,81847,181826,10707,175272,114660,160308,54059,51148,128806,179635,6603,134321,156207,135402,155327,184146,80524,178155,199229,168364,157522,60321,25069,86025,2246,130024,110557,55041,59661,122684,42028,41621,38053,142538,42372,119123,93344,25284,62780,175087,76081,161920,111348,112739,117469,175508,1296,106430,38329,114149,138049,66049,101841,161032,95462,79616,191379,112390,126360,188442,157911,151487,168432,28103,86976,26033,43800,40494,79437,185359,173885,136815,136783,187148,187806,47197,22803,198853,117901,130385,106631,158525,26316,135549,141253,167258,125114,100903,145097,98368,95067,81187,78666,117500,124054,199695,192611,196835,121892,78890,68859,124735,198490,64400,86405,57333,172967,136929,140808,145944,112149,79454,30179,143843,11937,86177,101103,175145,123619,27682,19198,32389,122286,87584,74721,101063,16443,96524,53187,128595,17332,20826,118721,95611,86952,174053,79223,31573,197288,100768,14477,57225,199874,178333,121581,189626,124522,31020,75357,93985,64396,29339,125837,40834,114295,13952,11715,6563,9349,24920,72465,181082,161024,27159,54411,25770,68263,150901,4379,163410,134599,141439,131148,22358,76017,160899,43656,192351,183326,120919,35273,48651,193372,193378,156877,164960,177811,52834,49909,103728,148046,119209,171826,161401,177817,23771,18121,176043,33780,125512,90428,68478,8547,68559,49722,162155,137993,46440,136528,147367,133565,42489,121672,41134,145408,113206,181431,109063,38922,150480,61492,23,76312,148993,176852,8820,158182,15426,45218,105459,116546,37655,173589,135173,163228,57138,191113,145280,122517,51866,27161,33236,143560,28400,173573,67457,77763,6817,143449,176075,151921,93318,82838,176421,191751,74411,136415,137561,8609,85731,4904,1319,101088,120486,45864,177564,161917,158255,99429,56514,148812,1727,188453,198524,52208,194720,178193,38415,127880,169978,14197,95857,102317,107701,45290,125372,199640,180295,41819,45690,137792,161663,46093,121642,184691,30425,161978,145289,167342,55319,5184,149033,67784,7230,95250,167751,22880,82279,110036,91554,152112,124374,113151,162963,66903,21285,168523,74102,124177,174922,128132,134338,154599,157894,179944,153172,168751,120314,60876,122633,79097,77376,34376,165092,140128,100917,16334,24867,52013,130937,63675,170490,8127,110086,78916,174754,45699,35136,190010,85338,167020,8896,61982,170135,94426,151068,97742,148989,31806,179730,65959,88510,188672,110436,14561,159761,169322,29129,146926,154956,59959,42703,153699,151193,102988,3699,56865,94168,64271,22227,135426,52172,144796,56394,155923,133826,159488,168630,128214,33580,108071,146104,6649,97447,110821,28140,34847,129795,112993,84367,28800,171836,119792,141717,112867,66696,861,122641,96209,3550,74151,83939,188967,40220,104199,88299,142747,130668,184268,24126,86589,136929,98674,13358,141309,3276,132979,119298,129320,173808,38930,65275,155590,191815,195955,27472,90049,30527,51826,168180,33885,59054,179858,97844,72051,164131,40627,14555,107354,81617,76770,73311,109234,20670,138025,189182,5308,72121,27401,77252,15538,155912,196519,177957,54799,70864,168669,11506,29361,123021,51400,4056,59738,2578,191552,121627,120186,52715,150680,125793,190097,190490,192789,37111,197971,90208,135687,11874,90403,173917,193314,40381,31962,58369,72839,164645,155527,62434,21949,196892,191723,13677,146262,118929,41110,26473,193268,38518,182984,2126,41992,185110,116538,181785,163443,35792,5525,14006,105107,24122,80309,103779,140920,76829,186063,77992,132883,97537,187041,20063,181746,62635,167953,15438,1287,69493,19783,149997,72007,95781,117113,162785,135088,66750,43978,50951,141309,9920,51693,139648,157493,157762,133730,151289,113000,65668,98997,141504,182174,60527,73844,189845,94285,25983,185892,59792,67115,30283,125307,110015,103833,161781,97794,142784,94064,150968,122326,196306,180097,69854,109806,61847,138279,97012,151493,162570,154515,47571,44371,44687,184470,38147,21757,95745,50735,54114,111975,173086,187028,20756,27708,85979,51093,125038,98829,100155,45677,134874,171011,65846,98738,153746,97099,58830,41301,112773,30514,29248,110965,99720,101106,17478,147400,102908,40537,139256,46335,17271,181836,193123,117316,16795,193923,50511,44096,99564,71454,37105,142551,37194,147171,143021,89390,87777,199048,162116,69393,180878,39564}}
    };
    // TODO: provide expected results here
    vector<int> answers {
    };
    
    for (auto& dp : params) {
        cout << endl;
        clock_t tstart = clock();
        auto res = countDifferentSubsequenceGCDs::Solution().countDifferentSubsequenceGCDs(dp.nums);
        cout << res << endl;
        cout << clock() - tstart << endl;
    }

    return 0;
}
//*/
